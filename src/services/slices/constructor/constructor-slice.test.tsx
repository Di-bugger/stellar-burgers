import {
  addBun,
  addConstructorIngredient,
  burgerConstructorSlice,
  moveConstructorIngredient,
  removeConstructorIngredient
} from './constructor-slice';

const bun = {
  _id: '643d69a5c3f7b9001cfa093c',
  name: 'Краторная булка N-200i',
  type: 'bun',
  proteins: 80,
  fat: 24,
  carbohydrates: 53,
  calories: 420,
  price: 1255,
  image: 'https://code.s3.yandex.net/react/code/bun-02.png',
  image_mobile: 'https://code.s3.yandex.net/react/code/bun-02-mobile.png',
  image_large: 'https://code.s3.yandex.net/react/code/bun-02-large.png',
  __v: 0
};

const firstIngredient = {
  _id: '643d69a5c3f7b9001cfa0941',
  name: 'Биокотлета из марсианской Магнолии',
  type: 'main',
  proteins: 420,
  fat: 142,
  carbohydrates: 242,
  calories: 4242,
  price: 424,
  image: 'https://code.s3.yandex.net/react/code/meat-01.png',
  image_mobile: 'https://code.s3.yandex.net/react/code/meat-01-mobile.png',
  image_large: 'https://code.s3.yandex.net/react/code/meat-01-large.png',
  __v: 0
};

const secondIngredient = {
  _id: '643d69a5c3f7b9001cfa093e',
  name: 'Филе Люминесцентного тетраодонтимформа',
  type: 'main',
  proteins: 44,
  fat: 26,
  carbohydrates: 85,
  calories: 643,
  price: 988,
  image: 'https://code.s3.yandex.net/react/code/meat-03.png',
  image_mobile: 'https://code.s3.yandex.net/react/code/meat-03-mobile.png',
  image_large: 'https://code.s3.yandex.net/react/code/meat-03-large.png',
  __v: 0
};

describe('ConstructorSlice', () => {
  it('Корректное добавление булочки', () => {
    const initialState = burgerConstructorSlice.getInitialState();
    const nextState = burgerConstructorSlice.reducer(initialState, addBun(bun));
    expect(nextState.bun).toEqual(bun);
  });

  it('Корректное добавление ингредиента', () => {
    const initialState = burgerConstructorSlice.getInitialState();
    const nextState = burgerConstructorSlice.reducer(
      initialState,
      addConstructorIngredient(firstIngredient)
    );
    expect(nextState.ingredients).toHaveLength(1);
    expect(nextState.ingredients[0]).toMatchObject(firstIngredient);
    expect(nextState.ingredients[0]).toHaveProperty('id'); // autogenerated nanoid
  });

  it('Корректное удаление ингредиента', () => {
    const withIngredient = burgerConstructorSlice.reducer(
      burgerConstructorSlice.getInitialState(),
      addConstructorIngredient(firstIngredient)
    );
    const idToRemove = withIngredient.ingredients[0].id;
    const resultState = burgerConstructorSlice.reducer(
      withIngredient,
      removeConstructorIngredient(idToRemove)
    );
    expect(resultState.ingredients).toHaveLength(0);
  });

  it('Корректное изменение порядка ингредиентов в начинке (вниз)', () => {
    let state = burgerConstructorSlice.getInitialState();
    state = burgerConstructorSlice.reducer(
      state,
      addConstructorIngredient(firstIngredient)
    );
    state = burgerConstructorSlice.reducer(
      state,
      addConstructorIngredient(secondIngredient)
    );

    const firstId = state.ingredients[0].id;
    const secondId = state.ingredients[1].id;

    const result = burgerConstructorSlice.reducer(
      state,
      moveConstructorIngredient({ index: 0, type: 'down' })
    );

    expect(result.ingredients[0].id).toBe(secondId);
    expect(result.ingredients[1].id).toBe(firstId);
  });

  it('Корректное изменение порядка ингредиентов в начинке (вверх)', () => {
    let state = burgerConstructorSlice.getInitialState();
    state = burgerConstructorSlice.reducer(
      state,
      addConstructorIngredient(firstIngredient)
    );
    state = burgerConstructorSlice.reducer(
      state,
      addConstructorIngredient(secondIngredient)
    );

    const firstId = state.ingredients[0].id;
    const secondId = state.ingredients[1].id;

    const result = burgerConstructorSlice.reducer(
      state,
      moveConstructorIngredient({ index: 1, type: 'up' })
    );

    expect(result.ingredients[0].id).toBe(secondId);
    expect(result.ingredients[1].id).toBe(firstId);
  });
});
